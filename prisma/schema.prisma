// Gerador e conex√£o
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // pode trocar pra mysql/postgres depois
  url      = env("DATABASE_URL")
}

// ================= ENUMS ==================
enum TipoUsuario {
  ADMIN
  CLIENTE
}

enum StatusAgendamento {
  ATIVO
  CONFIRMADO
  RECUSADO
  CANCELADO
  EDITADO
}

// ================= MODELOS ==================
model User {
  id           Int           @id @default(autoincrement())
  nome         String
  email        String        @unique
  senha        String
  tipo         TipoUsuario   @default(CLIENTE)
  telefone     String?       // opcional
  ativo        Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relacionamentos
  agendamentos Agendamento[]
  favoritos    Favorito[]

  @@map("users")
}

model Imovel {
  id             Int           @id @default(autoincrement())
  foto           String        // pode virar tabela separada futuramente
  titulo         String
  localizacao    String
  valor          Float
  iptu           Float
  metrosQuadrados Float
  quartos        Int
  banheiros      Int
  garagens       Int
  ambiente       String
  conveniencias  String        // pode virar tabela separada futuramente
  descricao      String

  // Relacionamentos
  agendamentos   Agendamento[]
  favoritos      Favorito[]

  @@map("imoveis")
}

model Agendamento {
  id           Int               @id @default(autoincrement())
  usuarioId    Int
  imovelId     Int
  nome         String
  email        String
  telefone     String
  dataVisita   DateTime
  horario      String
  observacoes  String?
  status       StatusAgendamento @default(ATIVO)
  createdAt    DateTime          @default(now())

  // Relacionamentos
  usuario      User    @relation(fields: [usuarioId], references: [id])
  imovel       Imovel  @relation(fields: [imovelId], references: [id])

  @@map("agendamentos")
}

model Favorito {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  imovelId  Int
  createdAt DateTime @default(now())

  // Relacionamentos
  usuario   User     @relation(fields: [usuarioId], references: [id])
  imovel    Imovel   @relation(fields: [imovelId], references: [id])

  // Evitar favoritos duplicados
  @@unique([usuarioId, imovelId])
  @@map("favoritos")
}
