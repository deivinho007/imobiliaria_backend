generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  nome      String      @db.VarChar(100)
  email     String      @unique @db.VarChar(255)
  senha     String      @db.VarChar(255)
  tipo      TipoUsuario @default(cliente)
  ativo     Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relacionamentos
  agendamentos Agendamento[]
  favoritos    Favorito[]

  @@map("users")
}

model Imovel {
  id              Int     @id @default(autoincrement())
  foto            String  @db.Text
  titulo          String  @db.VarChar(200)
  localizacao     String  @db.VarChar(300)
  valor           Decimal @db.Decimal(12,2)
  iptu            Decimal @db.Decimal(10,2)
  metrosQuadrados Float   @db.Float
  quartos         Int     @db.TinyInt
  banheiros       Int     @db.TinyInt
  garagens        Int     @db.TinyInt
  ambiente        String  @db.VarChar(100)
  conveniencias   String  @db.Text
  descricao       String  @db.Text
  ativo           Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  agendamentos Agendamento[]
  favoritos    Favorito[]

  @@map("imoveis")
}

model Agendamento {
  id          Int               @id @default(autoincrement())
  usuarioId   Int
  imovelId    Int
  dataVisita  DateTime          @db.Date
  horario     String            @db.VarChar(5)
  telefone    String?           @db.VarChar(15)
  observacoes String?           @db.Text
  status      StatusAgendamento @default(pendente)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relacionamentos
  usuario User   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  imovel  Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@index([imovelId], map: "agendamentos_imovelId_fkey")
  @@index([usuarioId], map: "agendamentos_usuarioId_fkey")
  @@index([dataVisita, status])
  @@map("agendamentos")
}

model Favorito {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  imovelId  Int
  createdAt DateTime @default(now())

  // Relacionamentos
  usuario User   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  imovel  Imovel @relation(fields: [imovelId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, imovelId])
  @@index([imovelId], map: "favoritos_imovelId_fkey")
  @@map("favoritos")
}

enum TipoUsuario {
  adm
  cliente
}

enum StatusAgendamento {
  pendente
  confirmado
  recusado
  cancelado
}